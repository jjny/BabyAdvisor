<?php
namespace BabyAdvisorBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
/**
 * FolderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
	public function findTopArticle()
    {
		$rsm = new ResultSetMappingBuilder($this->getEntityManager());
		$rsm->addRootEntityFromClassMetadata('BabyAdvisorBundle:Article', 'A');
		$rsm->addJoinedEntityFromClassMetadata('BabyAdvisorBundle\Entity\Centre_interet', 'C', 'A', 'Categories', array('id' => 'centre_interet_id'));
        $rsm->addJoinedEntityFromClassMetadata('BabyAdvisorBundle\Entity\Note', 'N', 'A', 'Notes', array('id' => 'article_id'));

		 
		$sql = 'SELECT *
				FROM article 
				INNER JOIN article_categorie ON article_categorie.article_id = article.id 
				INNER JOIN centre_interet ON centre_interet.id = article_categorie.centre_interet_id 
                INNER JOIN note ON note.article_id = article.id 
				ORDER BY note.moy_gen DESC';
		 
		$query = $this->_em->createNativeQuery($sql, $rsm);
		return $query->getResult();
    }

    public function findLastArticles()
    {
    	$rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('BabyAdvisorBundle:Article', 'A');
        $rsm->addJoinedEntityFromClassMetadata('BabyAdvisorBundle\Entity\Centre_interet', 'C', 'A', 'Categories', array('id' => 'centre_interet_id'));

         
        $sql = 'SELECT *
                FROM article 
                INNER JOIN article_categorie ON article_categorie.article_id = article.id 
                INNER JOIN centre_interet ON centre_interet.id = article_categorie.centre_interet_id 
                INNER JOIN note ON note.article_id = article.id
                ORDER BY article.date_ma_j DESC';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        return $query->getResult();
    }

    public function findArticlesOrderBy($orderBy)
    {
    	$query = $this->createQueryBuilder('A')
    		->select('A')
    		->orderBy('A.'.$orderBy);
    	return $query->getQuery()->getResult();
    }

    /*public function filterResult($value='')
    {
    	
    }*/
}